public class ClassNotes {
    /*
    Git != Github
Git - -keep track of the changes in the project
Repository
Basically a folder that git keep track of
It can be anything , text file , picture or source code
where is all tracking happening inside the repo
.git folder is where all tracking stored
GitHub Desktop
Git client tool to make it easy to work with git locally , visually
and easily share project to GitHub.com
Location :
     Working directory|copy|tree
     Staging area    a special area to prepare the changes before commit
     Local Repository  .git folder that track all information
     Remote Repository  repository in GitHub.com
Commit :
    a snapshot of changes you are tracking into local repository
    for examle : you created new file and committed now its tracked
               you edited the file commited and the changes are tracked
    it has few component
       The committers name :  B20-user
       Commit message : the message to describe what has changed
       SHA (Simple Hashing Algorithm.) :
        a long alphanumeric number to uniquely identify the changes
       Content of all the changes
How to go from local repository to remote repository
        First we need to have the remote repository
        then we need to build a connection
        and eventually push local changes to remote
    However GitHub Desktop does all 3 steps in one shot
    QUICK RECAP ON ACTIONS :
    Create Git Repo called B20-DAY1 on deesktop
    add 2 files
    commit first file first
    then commit second file
    make some changes into 2nd file
    Discard the change
    Publish to GitHub
    make more changes and push to orginin (remote)
    All action till this point --   local to remote
    --- PULL CHANGES FROM REMOTE REPOSITORY
    *  make some changes in remote repository
    * fetch origin to check whenther we have new changes
         in remote that we do not yet have locally
    *if we do , pull from the origin (remote)
    All action till this point --   remote to local
Sometimes we do not want to stage or commit certain files
or certain type files but we still want to have them
under working directory
git have a very special file called .gitignore
the content of this file contains the file name or pattern to be ignored
this file itself will be version controlled
everything this file specify will not be staged
Here is the scenario :
I want to add a file called secret.txt under my DAY2-repo
and i DO NOT want to version control this file
now create another file called top-secret.txt
also ignore this file , so we do not let git keep track of it
.gitignore file is a special file by git
to store the name of the files that you dont want to keep track of
.gitignore file itself WILL BE VERSION CONTROLLED
CAN WE IGNORE WHATS ALREADY BEEN COMMITTED ?  NOOOOO@!@@!
Practice :
Add a new repository on your desktop called Day2-practice
specify what we want to ignore in this repository before we add anything
top menu -- repository -- repositpory setting -- ignore file tab
add the file names you want to ignore seperated by new line
secret1.txt
secret2.txt
add the files exists in .ignore file and observe whether it will be staged
add the files that does not exists in .ignore file
and observe whether it will be staged
add file pattern to ignore using wildcard (PENDING DID NOT DO THIS PART)
We created a maven project
initialized repository using drag and drop
it created a repository
and committed everything
but we wanted to selectivley commit
so in any intellij maven project
there are 3 things to ignore
.idea folder (generated by intellij )
target folder (byte codes and other not related stuff)
YourProjectName.iml file (Generated by intellij)
everything else we want to keep track of
so we did a commit for source code and pom.xml file and gitignore file
because thats what we care about for intellij maven project
in order to ignore entire folder we can provide the folder path
for example .idea and target folder is right under root directory
so we can add directly inside .gitignore file
.idea
target
YourProjectName.iml
ignoring folder will enable us not to add each file one by one
if desired result is to ignore everything
-----  Common issues while creating a repository
if you have below folder structure :
    parentFolder      --- repository here
        --subfolder--       --- CAN NOT CREATE A REPOSITORY UNDER HERE
            file1.txt
            file2.txt
---Create a Day3-Repo  under your Desktop

   1. using repository setting in GitHub Desktop
   2. add some files and folder to be ignored as below
        .idea
        target
        *.iml
    * is a wild card to represent anything
      *.txt  represent any text file that .txt extention
      a*.txt  represend any text file that start with letter a
   3. Copy of the content of one of your IntelliJ project folder
        YourProjectFolder
             src
             ...
             ...
    4. commit the changes
    5. add one more class called Halloween
    6. commit the change
    7. push to your GitHub.com
    8. While you are on GitHub.com your repository homepage
         add a new file directly from there
         called FromGitHub.txt
         add some text inside
         and commit
    9. Now come back to GitHub Desktop , click on fetch origin
        to see the difference
    10. pull down the changes you have made from GitHub.com to local repo
PLEASE CREATE NEW PROJECT AND DO NOT USE EXISTING REPOSITORY
OR IT WILL NOT WORK !!!!
------ Now we will repeat what we learned in IntelliJ directly
     IntelliJ idea has native support for Git and GitHub within the IDE
     Create new maven project called HalloweenProject
     Add a java class under src/main/java called Halloween
     Add a java class under src/test/java called HalloweenTest
     Actions we are going to take :
     1. initilize a repositpory by enabling version control for this project
     2. and ignore .iml file that created
        (it will ask you if you want to create .ignore)
        observer .gitignore file is automatically created
     3. once the .gitignore is created
            add .idea folder
            add target folder (this folder will not exist until you run your code)
     4. make initial commit using the UI
     5. make more changes and make more commit
     6. observe the history of the commits
     ---  Set up GitHub account in IntelliJ
     1. add your GitHub account from Preference | Setting
     2. enter your creatdentials to connect
     3. Share your project in GitHub directly from IntellJ
     4. make more changes and commit  SHORTCUT :
            mac :       command+ K
            windows :   control + K
     5. push your commit to GitHub
            mac :       command+Shift+ K
            windows :   control+Shift+ K
     6. Stay on GitHub.com under your repo homepage
        add new file called fromGitHub.txt  (add some content)
        and commit directly in GitHub.com
     HEAD is the pointer to your current commit in the history
     when you are on master branch the head move with the master
     We can create new branch to open up new line of work
     without affecting whats in our main timeline -->> master branch
     1. create a new branch called featureA
     2. add a new file featureACode.java and commit
     3. addd some more changes and commit one more time
     4. observer the HEAD now moving with featureA branch
     5. merge above changes into the master branch
        1. move your HEAD to master branch by checking out master
        2. right click on featureA branch and select merge into current branch
        3. observe the git log to see all the changes are now in master
        4. master , feautureA are both in sync
     Practice :
        0. checkout master to move your head to master
        1. Create a new branch called us-123
        2. Add 2 java class TC001 , TC002
        3. commit above 2 files
        4. add some changes into TC001 and commit your work
        5. add some changes into TC002 and commit your work
        6. checkout master to move your head back to master
        7. merge the changes from us-123 branch into master
        8 observe your log to see the changes are brought to master branch


     */
}
